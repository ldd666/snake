<template>
  <view class="snake">
    <view class="head">
      <text class="difficult">难度：3</text>
      <text class="score">总分：{{score}}</text>
    </view>
		<canvas id="snakeCanvas" canvas-id="snakeCanvas"></canvas>
    <view @tap="changeDir(0)" class="play-up">上</view>
    <view class="play-down">
      <view @tap="changeDir(3)" class="play">左</view>
      <view @tap="changeDir(2)" class="play">下</view>
      <view @tap="changeDir(1)" class="play">右</view>
    </view>
    <cover-view wx:if="{{gameover}}" class="mask">
      <cover-view class="score">您得了{{score}}分</cover-view>
      <cover-view  class="again">再来一局</cover-view>
    </cover-view>
  </view>
</template>
<script>
import wepy from 'wepy'
export default class Index extends wepy.page {
  data = {
    snake: [],
    snake_next_dir: 1,
    score: 0,
    ctx: '',
    canvas: {
      width: 320,
      height: 320
    },
    food: {},
    hasFood: false,
    size: 10,
    gameover: false
  }
  config = {
    navigationBarTitleText: '贪吃蛇'
  }
  methods = {
    changeDir(dir) {
      // up: 0,right: 1,down: 2,left: 3
      // 上次方向是上，不能点击下
      if ((this.snake_next_dir === 0 && parseInt(dir, 10) === 2) || (this.snake_next_dir === 2 && parseInt(dir, 10) === 0)) {
        return
      }
      // 上次方向是左，不能点击右
      if ((this.snake_next_dir === 3 && parseInt(dir, 10) === 1) || (this.snake_next_dir === 1 && parseInt(dir, 10) === 3)) {
        return
      }
      this.snake_next_dir = parseInt(dir, 10)
    }
  }
  onLoad(e) {
    this.ctx = wx.createCanvasContext('snakeCanvas')
    this.newGame()
    this.main()
    this.makeFood()
  }
  newGame() {
    // 倒叙，使其向前进步
    for (let i = 4; i >= 0; i--) {
      this.snake.push({
        x: i,
        y: 15
      })
    }
    this.snake_next_dir = 1
    this.score = 0
  }
  main() {
    let _x = this.snake[0].x
    let _y = this.snake[0].y
     // up: 0,right: 1,down: 2,left: 3
    switch (this.snake_next_dir) {
      case 0:
        _y--
        break
      case 1:
        _x++
        break
      case 2:
        _y++
        break
      case 3:
        _x--
        break
      default:
        break
    }
    this.snake.pop()
    this.snake.unshift({
      x: _x,
      y: _y
    })
    // 绘画蛇的区域
    this.ctx.beginPath()
    for (let m = 0; m <= this.canvas.width / this.size; m++) {
      this.ctx.moveTo(0, m * this.size)
      this.ctx.lineTo(this.canvas.width, m * this.size)
    }
    for (let n = 0; n <= this.canvas.height / this.size; n++) {
      this.ctx.moveTo(n * this.size, 0)
      this.ctx.lineTo(n * this.size, this.canvas.height)
    }
    this.ctx.stroke()

    // this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)
    // 绘画食物
    this.makeFood()
    // 检查是否碰墙
    if (this.snake[0].x < 0 || this.snake[0].x === this.canvas.width / this.size || this.snake[0].y < 0 || this.snake[0].y === this.canvas.height / this.size) {
      console.log('gameover')
      this.gameover = true
      this.$apply()
      return
    }
    // 绘画蛇
    for (let j = 0; j < this.snake.length; j++) {
      // 吃食物
      if (this.hasFood) {
        if (this.food.x === this.snake[j].x && this.food.y === this.snake[j].y) {
          this.snake[this.snake.length] = {
            x: this.food.x,
            y: this.food.y
          }
          this.score++
          this.hasFood = false
        }
      }
      this.drawDot(this.snake[j].x, this.snake[j].y)
    }

    this.ctx.fill()
    this.ctx.draw()

    setTimeout(() => {
      this.main()
    }, 500)
  }
  drawDot(x, y) {
    this.ctx.setFillStyle('#3CB371')
    this.ctx.fillRect(x * this.size, y * this.size, this.size, this.size)
  }
  makeFood() {
    if (!this.hasFood) {
      this.food.x = Math.floor(Math.random() * ((this.canvas.width / this.size) - 1))
      this.food.y = Math.floor(Math.random() * ((this.canvas.height / this.size) - 1))
      for (var i = 0; i < this.snake.length; i++) {
          // 如果食物被吃就增加食物
        // if (checkBlock(food.x, food.y, snake[i].x, snake[i].y)) {
        //     addFood()
        //   }
      }
      this.hasFood = true
    }
    this.drawDot(this.food.x, this.food.y)
  }
}
</script>
<style lang="less">
.snake{
  background-color: #383838;
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
  bottom: 0;
  .head {
    height: 60px;
    color: #fff;
    line-height: 60px;
    .difficult {
      float:left;
      margin-left: 10px;
    }
    .score {
      float: right;
      margin-right: 10px;
    }
  }
  .play-up {
    height: 50px;
    width: 50px;
    border: solid 1px #CD853F;
    margin:0 auto;
    color: #fff;
    text-align:center;
    line-height: 50px;
    background-color:orange;
    border-radius:8px;
  }
  .play-down {
    margin:auto;
    width: 156px;
    color: #fff;
    .play {
      height: 50px;
      width: 50px; 
      border: solid 1px #CD853F;
      display: inline-block;
      text-align:center;
      line-height: 50px;
      background-color:orange;
      border-radius:8px;
    }
  }
}
#snakeCanvas {
  width: 320px;
  height: 320px;
  margin: 0 auto;
  clear:both;
}
.mask {
  color: #fff;
  position:absolute;
  top:0;
  left:0;
  bottom: 0;
  right:0;
  background-color:rgba(0, 0, 0, 0.9);
  .score {
    text-align:center;
    margin-top:50%;
  }
  .again {
    text-align:center;
    height: 50px;
    width:200px;
    background-color:orange;
    line-height: 50px;
    border-radius:8px;
    margin:20px auto;
  }
}
</style>
